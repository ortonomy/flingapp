// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders without crashing 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <FormInputAnimated
    type="password"
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className={undefined}
>
          <input
                    minLength="8"
                    name={undefined}
                    onInput={[Function]}
                    pattern="^[a-zA-Z0-9!#$%&*+/=?^_|~-]{8,}$"
                    required={true}
                    type="password"
          />
          <label
                    htmlFor={undefined}
          />
</div>,
        <div
          className={undefined}
>
          <FormFeedback
                    message=""
                    type=""
          />
</div>,
      ],
      "className": undefined,
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <input
              minLength="8"
              name={undefined}
              onInput={[Function]}
              pattern="^[a-zA-Z0-9!#$%&*+/=?^_|~-]{8,}$"
              required={true}
              type="password"
/>,
            <label
              htmlFor={undefined}
/>,
          ],
          "className": undefined,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "minLength": "8",
              "name": undefined,
              "onInput": [Function],
              "pattern": "^[a-zA-Z0-9!#$%&*+/=?^_|~-]{8,}$",
              "required": true,
              "type": "password",
            },
            "ref": null,
            "rendered": null,
            "type": "input",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": undefined,
              "htmlFor": undefined,
            },
            "ref": null,
            "rendered": null,
            "type": "label",
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <FormFeedback
            message=""
            type=""
/>,
          "className": undefined,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "message": "",
            "type": "",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className={undefined}
>
            <input
                        minLength="8"
                        name={undefined}
                        onInput={[Function]}
                        pattern="^[a-zA-Z0-9!#$%&*+/=?^_|~-]{8,}$"
                        required={true}
                        type="password"
            />
            <label
                        htmlFor={undefined}
            />
</div>,
          <div
            className={undefined}
>
            <FormFeedback
                        message=""
                        type=""
            />
</div>,
        ],
        "className": undefined,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <input
                minLength="8"
                name={undefined}
                onInput={[Function]}
                pattern="^[a-zA-Z0-9!#$%&*+/=?^_|~-]{8,}$"
                required={true}
                type="password"
/>,
              <label
                htmlFor={undefined}
/>,
            ],
            "className": undefined,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "minLength": "8",
                "name": undefined,
                "onInput": [Function],
                "pattern": "^[a-zA-Z0-9!#$%&*+/=?^_|~-]{8,}$",
                "required": true,
                "type": "password",
              },
              "ref": null,
              "rendered": null,
              "type": "input",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": undefined,
                "htmlFor": undefined,
              },
              "ref": null,
              "rendered": null,
              "type": "label",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <FormFeedback
              message=""
              type=""
/>,
            "className": undefined,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "message": "",
              "type": "",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactFifteenAdapter {
      "options": Object {
        "supportPrevContextArgumentOfComponentDidUpdate": true,
      },
    },
  },
}
`;
