// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders without crashing 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <FreelancerInfo
    freelancer={
        Object {
            "flFirstName": "example",
            "flLastName": "freelancer",
          }
    }
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <InfoTable
          info={
                    Object {
                              "first name": "example",
                              "last name": "freelancer",
                              "location": undefined,
                              "native speaker": "No",
                              "primary language": undefined,
                              "timezone": undefined,
                            }
          }
          title="Personal Information"
/>,
        <InfoTable
          info={
                    Object {
                              "capable roles": "Chief editor, Editor, Content developer",
                              "documents": Array [
                                "freelancer_assessment.doc",
                              ],
                              "employment status": undefined,
                              "tags": Array [
                                "expertise:ESP",
                                "works fast",
                              ],
                            }
          }
          title="Professional Information"
/>,
        <InfoTable
          info={Object {}}
          title="Experience"
/>,
      ],
      "className": undefined,
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "info": Object {
            "first name": "example",
            "last name": "freelancer",
            "location": undefined,
            "native speaker": "No",
            "primary language": undefined,
            "timezone": undefined,
          },
          "title": "Personal Information",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "info": Object {
            "capable roles": "Chief editor, Editor, Content developer",
            "documents": Array [
              "freelancer_assessment.doc",
            ],
            "employment status": undefined,
            "tags": Array [
              "expertise:ESP",
              "works fast",
            ],
          },
          "title": "Professional Information",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "info": Object {},
          "title": "Experience",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <InfoTable
            info={
                        Object {
                                    "first name": "example",
                                    "last name": "freelancer",
                                    "location": undefined,
                                    "native speaker": "No",
                                    "primary language": undefined,
                                    "timezone": undefined,
                                  }
            }
            title="Personal Information"
/>,
          <InfoTable
            info={
                        Object {
                                    "capable roles": "Chief editor, Editor, Content developer",
                                    "documents": Array [
                                      "freelancer_assessment.doc",
                                    ],
                                    "employment status": undefined,
                                    "tags": Array [
                                      "expertise:ESP",
                                      "works fast",
                                    ],
                                  }
            }
            title="Professional Information"
/>,
          <InfoTable
            info={Object {}}
            title="Experience"
/>,
        ],
        "className": undefined,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "info": Object {
              "first name": "example",
              "last name": "freelancer",
              "location": undefined,
              "native speaker": "No",
              "primary language": undefined,
              "timezone": undefined,
            },
            "title": "Personal Information",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "info": Object {
              "capable roles": "Chief editor, Editor, Content developer",
              "documents": Array [
                "freelancer_assessment.doc",
              ],
              "employment status": undefined,
              "tags": Array [
                "expertise:ESP",
                "works fast",
              ],
            },
            "title": "Professional Information",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "info": Object {},
            "title": "Experience",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactFifteenAdapter {
      "options": Object {
        "supportPrevContextArgumentOfComponentDidUpdate": true,
      },
    },
  },
}
`;
